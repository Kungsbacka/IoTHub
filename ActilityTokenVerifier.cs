using IoTHub.Model;
using Microsoft.AspNetCore.Http;
using System;
using System.Security.Cryptography;
using System.Text;

namespace IoTHub
{

    public class ActilityTokenVerifier : IActilityTokenVerifier
    {
        private static ReadOnlySpan<byte> HexLookup => new byte[]
        {
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 
        };

        public ActilityTokenVerifier()
        {
        }

        public bool IsTokenValid(ActilityUplinkData data, IQueryCollection query, string authenticationKey)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }
            string token = query["Token"];
            if (string.IsNullOrEmpty(token) || token.Length != 64)
            {
                throw new ArgumentException("Invalid token");
            }

            StringBuilder sb = new();

            // Add body elements
            sb.Append(data.DevEUI_Uplink.CustomerID);
            sb.Append(data.DevEUI_Uplink.DevEUI);
            sb.Append(data.DevEUI_Uplink.FPort);
            sb.Append(data.DevEUI_Uplink.FCntUp);
            sb.Append(data.DevEUI_Uplink.Payload_Hex);

            // Add query string without token
            foreach (var kvp in query)
            {
                if (kvp.Key.Equals("Token", StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }
                sb.Append(kvp.Key);
                sb.Append('=');
                sb.Append(kvp.Value);
                sb.Append('&');
            }
            sb.Length--;

            // Add tunnel authentication key
            sb.Append(authenticationKey);

            using SHA256 sha256 = SHA256.Create();
            byte[] calculatedToken = sha256.ComputeHash(Encoding.ASCII.GetBytes(sb.ToString()));

            for (int i = 0; i < token.Length; i += 2)
            {
                byte b = (byte)(HexLookup[(byte)token[i]] * 16 + HexLookup[(byte)token[i + 1]]);
                if (b != calculatedToken[i / 2])
                {
                    return false;
                }
            }
            return true;
        }
    }
}
